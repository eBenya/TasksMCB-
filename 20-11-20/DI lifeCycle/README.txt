LifeCycle:
    Transient: при каждом обращении к сервису создается новый объект сервиса. 
В течение одного запроса может быть несколько обращений к сервису, 
соответственно при каждом обращении будет создаваться новый объект.
Подобная модель жизненного цикла наиболее подходит для легковесных сервисов, 
которые не хранят данных о состоянии.

    Scoped: для каждого запроса создается свой объект сервиса.
То есть если в течение одного запроса есть несколько обращений к одному сервису,
то при всех этих обращениях будет использоваться один и тот же объект сервиса.

    Singleton: объект сервиса создается при первом обращении к нему,
все последующие запросы используют один и тот же ранее созданный объект сервиса.


/**
*  Тут в чем прикол, в зависимости от типа регистрации Trincient, Scoped, Singleton -
* - результаты будут,
*внезапно, разные! 
*  В случае Trinsient - Counter и Service, возвращают, преимущественно,
*разные значения, т.к. объект типа ICounter будет пересоздаваться.
*  В случае Scouped - Counter и Service, возвращают одинаковые значения,
*но меняются при каждом новом запросе.
*  В случае SingleTon - Counter и Service, всегда один объект.
**/